# -*- coding: utf-8 -*-
# Sort a regex in reverse order by length.

import ast
import sys

# import adlamToLatin

adlam_to_latin_map = {
    "𞤀": "A",
    "𞤢": "a",
    "𞤀𞥄": "AA",
    "𞤀𞥄": "Aa",
    "𞤢𞥄": "aa",
    "𞤄": "B",
    "𞤦": "b",
    "𞤄𞥆": "BB",
    "𞤄𞥆": "Bb",
    "𞤦𞥆": "bb",
    "𞤇": "Ɓ",
    "𞤩": "ɓ",
    "𞤇𞥆": "ƁƁ",
    "𞤇𞥆": "Ɓɓ",
    "𞤩𞥆": "ɓɓ",
    "𞤇": "BH",
    "𞤇": "Bh",
    "𞤇𞥆": "BBH",
    "𞤇𞥆": "Bbh",
    "𞤩": "bh",
    "𞤩𞥆": "bbh",
    "𞤕": "C",
    "𞤷": "c",
    "𞤕𞥆": "CC",
    "𞤕𞥆": "Cc",
    "𞤷𞥆": "cc",
    "𞤁": "D",
    "𞤣": "d",
    "𞤁𞥆": "DD",
    "𞤁𞥆": "Dd",
    "𞤣𞥆": "dd",
    "𞤍": " Ɗ",
    "𞤯": "ɗ",
    "𞤍𞥆": " ƊƊ",
    "𞤍𞥆": " Ɗɗ",
    "𞤯𞥆": "ɗɗ",
    "𞤍": "DH",
    "𞤯": "dh",
    "𞤍𞥆": "DDH",
    "𞤍𞥆": "Ddh",
    "𞤯𞥆": "ddh",
    "𞤉": "E",
    "𞤫": "e",
    "𞤉𞥅": "EE",
    "𞤉𞥅": "Ee",
    "𞤫𞥅": "ee",
    "𞤊": "F",
    "𞤬": "f",
    "𞤊𞥆": "FF",
    "𞤊𞥆": "Ff",
    "𞤬𞥆": "ff",
    "𞤘": "G",
    "𞤺": "g",
    "𞤘𞥆": "GG",
    "𞤘𞥆": "Gg",
    "𞤺𞥆": "gg",
    "𞤞": "GB",
    "𞥀": "gb",
    "𞤞𞥆": "GGB",
    "𞤞𞥆": "Ggb",
    "𞥀𞥆": "ggb",
    "𞤖": "H",
    "𞤸": "h",
    "𞤖𞥆": "HH",
    "𞤖𞥆": "Hh",
    "𞤸𞥆": "hh",
    "𞤋": "I",
    "𞤭": "i",
    "𞤋𞥅": "II",
    "𞤋𞥅": "Ii",
    "𞤭𞥅": "ii",
    "𞤔": "J",
    "𞤶": "j",
    "𞤔𞥆": "JJ",
    "𞤔𞥆": "Jj",
    "𞤶𞥆": "jj",
    "𞤑": "K",
    "𞤳": "k",
    "𞤑𞥆": "KK",
    "𞤑𞥆": "Kk",
    "𞤳𞥆": "kk",
    "𞤝": "KH",
    "𞤿": "kh",
    "𞤝𞥆": "KKH",
    "𞤝𞥆": "Kkh",
    "𞤿𞥆": "kkh",
    "𞤝": "X",
    "𞤿": "x",
    "𞤝𞥆": "XX",
    "𞤝𞥆": "Xx",
    "𞤿𞥆": "xx",
    "𞤂": "L",
    "𞤤": "l",
    "𞤂𞥆": "LL",
    "𞤂𞥆": "Ll",
    "𞤤𞥆": "ll",
    "𞤃": "M",
    "𞤥": "m",
    "𞤃𞥆": "MM",
    "𞤃𞥆": "Mm",
    "𞤥𞥆": "mm",
    "𞤐": "N",
    "𞤲": "n",
    "𞤐𞥆": "NN",
    "𞤐𞥆": "Nn",
    "𞤲𞥆": "nn",
    "𞤛": "Ŋ",
    "𞤽": "ŋ",
    "𞤛𞥆": "ŊŊ",
    "𞤛𞥆": "Ŋŋ",
    "𞤽𞥆": "ŋŋ",
    "𞤛": "NH",
    "𞤽": "nh",
    "𞤛𞥆": "NNH",
    "𞤛𞥆": "Nnh",
    "𞤽𞥆": "nnh",
    "𞤙": "Ñ",
    "𞤻": "ñ",
    "𞤙𞥆": "ÑÑ",
    "𞤙𞥆": "Ññ",
    "𞤻𞥆": "ññ",
    "𞤙": "NY",
    "𞤻": "ny",
    "𞤙𞥆": "NNY",
    "𞤙𞥆": "Nny",
    "𞤻𞥆": "nny",
    "𞤌": "O",
    "𞤮": "o",
    "𞤌𞥅": "OO",
    "𞤌𞥅": "Oo",
    "𞤮𞥅": "oo",
    "𞤆": "P",
    "𞤨": "p",
    "𞤆𞥆": "PP",
    "𞤆𞥆": "Pp",
    "𞤨𞥆": "pp",
    "𞤠": "KP",
    "𞥂": "kp",
    "𞤠𞥆": "KKP",
    "𞤠𞥆": "Kkp",
    "𞥂𞥆": "kkp",
    "𞤗": "Q",
    "𞤹": "q",
    "𞤗𞥆": "QQ",
    "𞤗𞥆": "Qq",
    "𞤹𞥆": "qq",
    "𞤗": "GH",
    "𞤹": "gh",
    "𞤗𞥆": "GGH",
    "𞤗𞥆": "Ggh",
    "𞤹𞥆": "ggh",
    "𞤈": "R",
    "𞤪": "r",
    "𞤈𞥆": "RR",
    "𞤈𞥆": "Rr",
    "𞤪𞥆": "rr",
    "𞤅": "S",
    "𞤧": "s",
    "𞤅𞥆": "SS",
    "𞤅𞥆": "Ss",
    "𞤧𞥆": "ss",
    "𞤡": "SH",
    "𞥃": "Sh",
    "𞤡𞥆": "SSH",
    "𞤡𞥆": "Ssh",
    "𞥃𞥆": "ssh",
    "𞤚": "T",
    "𞤼": "t",
    "𞤚𞥆": "TT",
    "𞤚𞥆": "Tt",
    "𞤼𞥆": "tt",
    "𞤓": "U",
    "𞤵": "u",
    "𞤓𞥅": "UU",
    "𞤓𞥅": "Uu",
    "𞤵𞥅": "uu",
    "𞤜": "V",
    "𞤾": "v",
    "𞤜𞥆": "VV",
    "𞤜𞥆": "Vv",
    "𞤾𞥆": "vv",
    "𞤏": "W",
    "𞤱": "w",
    "𞤏𞥆": "WW",
    "𞤏𞥆": "Ww",
    "𞤱𞥆": "ww",
    "𞤒": "Y",
    "𞤴": "y",
    "𞤒𞥆": "YY",
    "𞤒𞥆": "Yy",
    "𞤴𞥆": "yy",
    "𞤎": "Ƴ",
    "𞤰": "ƴ",
    "𞤎𞥆": "ƳƳ",
    "𞤎𞥆": "Ƴƴ",
    "𞤰𞥆": "ƴƴ",
    "𞤎": "YH",
    "𞤰": "yh",
    "𞤎𞥆": "YYH",
    "𞤎𞥆": "Yyh",
    "𞤰𞥆": "yyh",
    "𞤟": "Z",
    "𞥁": "z",
    "𞤟𞥆": "ZZ",
    "𞤟𞥆": "Zz",
    "𞥁𞥆": "zz",
    𞤐'"𞤁": "ND",
    𞤐'"𞤁": "Nd",
    "𞤲": "𞤣	nd",
    𞤐'"𞤄": "MB",
    "𞤐": "𞤄	Mb",
    𞤲'"𞤦": "mb",
    "𞤐": "𞤔	NJ",
    𞤐'"𞤔": "Nj",
    𞤐'"𞤘": "NG",
    "𞤐": "𞤘	Ng",
    "𞤲": "𞤺	ng",
    𞤲"𞤣": "nnd",
    𞤥"𞤦": "mmb",
    𞤲"𞤶": "nnj",
    𞤲"𞤺": "nng    ",
    # TODO: digits and punctuation
'𞤀𞤁𞤂𞤢𞤃':	'Laten',
'𞤀𞥄𞤐𞤁':	'AAND',
'𞤀𞥄𞤲𞤣':	'Aand',
'𞤢𞥄𞤲𞤣':	'aand',
'𞤀𞥄𞤐𞤄':	'AAMB',
'𞤀𞥄𞤲𞤦':	'Aamb',
'𞤢𞥄𞤲𞤦':	'aamb',
'𞤀𞥄𞤐𞤔':	'AANJ',
'𞤀𞥄𞤲𞤶':	'Aanj',
'𞤢𞥄𞤲𞤶':	'aanj',
'𞤀𞥄𞤐𞤘':	'AANG',
'𞤀𞥄𞤲𞤺':	'Aang',
'𞤢𞥄𞤲𞤺':	'aang',
'𞤉𞥅𞤐𞤁':	'EEND',
'𞤉𞥅𞤲𞤣':	'Eend',
'𞤫𞥅𞤲𞤣':	'eend',
'𞤉𞥅𞤐𞤄':	'EEMB',
'𞤉𞥅𞤲𞤦':	'Eemb',
'𞤫𞥅𞤲𞤦':	'eemb',
'𞤉𞥅𞤐𞤔':	'EENJ',
'𞤉𞥅𞤲𞤶':	'Eenj',
'𞤫𞥅𞤲𞤶':	'eenj',
'𞤉𞥅𞤐𞤘':	'EENG',
'𞤉𞥅𞤲𞤺':	'Eeng',
'𞤫𞥅𞤲𞤺':	'eeng',
'𞤋𞥅𞤐𞤁':	'IIND',
'𞤋𞥅𞤲𞤣':	'Iind',
'𞤭𞥅𞤲𞤣':	'iind',
'𞤋𞥅𞤐𞤄':	'IIMB',
'𞤋𞥅𞤲𞤦':	'Iimb',
'𞤭𞥅𞤲𞤦':	'iimb',
'𞤋𞥅𞤐𞤔':	'IINJ',
'𞤋𞥅𞤲𞤶':	'Iinj',
'𞤭𞥅𞤲𞤶':	'iinj',
'𞤋𞥅𞤐𞤘':	'IING',
'𞤋𞥅𞤲𞤺':	'Iing',
'𞤭𞥅𞤲𞤺':	'iing',
'𞤌𞥅𞤐𞤁':	'OOND',
'𞤌𞥅𞤲𞤣':	'Oond',
'𞤮𞥅𞤲𞤣':	'oond',
'𞤌𞥅𞤐𞤄':	'OOMB',
'𞤌𞥅𞤲𞤦':	'Oomb',
'𞤮𞥅𞤲𞤦':	'oomb',
'𞤌𞥅𞤐𞤔':	'OONJ',
'𞤌𞥅𞤲𞤶':	'Oonj',
'𞤮𞥅𞤲𞤶':	'oonj',
'𞤌𞥅𞤐𞤘':	'OONG',
'𞤌𞥅𞤲𞤺':	'Oong',
'𞤮𞥅𞤲𞤺':	'oong',
'𞤓𞥅𞤐𞤁':	'UUND',
'𞤓𞥅𞤲𞤣':	'Uund',
'𞤵𞥅𞤲𞤣':	'uund',
'𞤓𞥅𞤐𞤄':	'UUMB',
𞤓𞥅'𞤲𞤦':	'Uumb',
'𞤵𞥅𞤲𞤦':	'uumb',
'𞤓𞥅𞤐𞤔':	'UUNJ',
'𞤓𞥅𞤲𞤶':	'Uunj',
'𞤵𞥅𞤲𞤶':	'uunj',
'𞤓𞥅𞤐𞤘':	'UUNG',
'𞤓𞥅𞤲𞤺':	'Uung',
'𞤵𞥅𞤲𞤺':	'uung',
'𞤐𞤁':	'ND',
'𞤐𞤣':	'Nd',
'𞤲𞤣':	'nd',
'𞤐𞤄':	'MB',
'𞤐𞤦':	'Mb',
'𞤲𞤦':	'mb',
'𞤐𞤔':	'NJ',
'𞤐𞤶':	'Nj',
'𞤲𞤶':	'nj',
'𞤐𞤘':	'NG',
'𞤐𞤺':	'Ng',
'𞤲𞤺':	'ng',
'𞤢𞤢':	'a\'a',
'𞤫𞤫':	'e\'e',
'𞤭𞤭':	'i\'i',
'𞤮𞤮':	'o\'o',
'𞤵𞤵':	'u\'u',
'𞤀𞤀':	'A\'a',
'𞤉𞤉':	'E\'e',
'𞤋𞤋':	'I\'i',
'𞤌𞤌':	'O\'o',
'𞤓𞤓':	'U\'u',
'𞤀𞤀':	'A\'A',
'𞤉𞤉':	'E\'E',
'𞤋𞤋':	'I\'I',
'𞤌𞤌':	'O\'O',
'𞤓𞤓':	'U\'U',

'𞥐      ': '0',
'𞥑      ': '1',
'𞥒      ': '2',
'𞥓      ': '3',
'𞥔      ': '4',
'𞥕      ': '5',
'𞥖      ': '6',
'𞥗      ': '7',
'𞥘      ': '8',
'𞥙      ': '9',
'!      ': '!',

'𞥞      ': '!',
'?      ': '?',
'𞥟      ': '?',
'⹁      ': ',',
'⁏      ': ';',
'.	.  ': ' '
}

class keyboard_data ():
    def __init__(self, filename):
        file = open(filename, mode='r', encoding='utf-8')
        self.raw_data = file.readlines()

        #print('KB = %s' % self.raw_data)
        return

    def fields(self):
        # Find the LAYOUT = line
        start_line_num = -1
        last_brace_line = -1
        line_num = 0
        for line in self.raw_data:
            layout_pos = line.find('LAYOUT = {')

            if layout_pos >= 0 and start_line_num < 0:
                start_line_num = line_num
                # Got the line for start of the data
                print('LAYOUT_POS = %s %s' % (layout_pos, line))

            close_brace_pos = line.find('}')
            if close_brace_pos >= 0:
                # Got the line for start of the data
#                print('LAYOUT_POS = %s %s' % (close_brace_pos, line))
                last_brace_line = line_num

            line_num += 1

        print('start: %s' % (self.raw_data[start_line_num]))
        print('last:  %s' % (self.raw_data[last_brace_line]))

        # TODO: Start with a single '{'
        these_lines = ['{', ' '.join(self.raw_data[start_line_num+1:
                                                   last_brace_line + 1]).replace("\\", "")]
        print('these_lines = %s' % ' '.join(these_lines))

        try:
            self.data_dict = ast.literal_eval(these_lines)
            print(self.data_dict['title'])
        except BaseException as err:
            print('Error = %s' % err)
            
    def getTransforms(self):
        
        return

    
input_rules = {
        'p.':   '\ue001',
        'pi.':  '\ue000',
        'w.':   '\ue010',
        'wi.':  '\ue00f',
        'wii.': '\ue01f',
        'mb.':  '\ue025',
        'mbi.': '\ue026',
        'b.':   '\ue03b',
        'bi.':  '\ue03c',    
        'kp.':  '\ue049',
        'gb.':  '\ue056',
        'f.':   '\ue061',
        'v.':   '\ue06c',
        't.':   '\ue079',
        'ti.':  '\ue07a',
        'l.':   '\ue088',
        'li.':  '\ue087',
        'lii.': '\ue086',
        'nd.':  '\ue09a',
        'ndi.': '\ue09b',
        'd.':   '\ue0a9',
        'di.':  '\ue0aa',
        's.':   '\ue0b5',
        'si.':  '\ue0b4',
        'j.':   '\ue0c2',
        'ji.':  '\ue0c3',
        'y.':   '\ue0da',
        'ng.':  '\ue0e6',
        'ngi.': '\ue0e7',
        'g.':   '\ue0f6',
        'gi.':  '\ue0f7',
        'k.':   '\ue019',
        'ki.':  '\ue10a',
        'h.':   '\ue117',
        'hi.':  '\ue134',
        'hii.': '\ue135',
        'm.':   '\ue140',
        'n.':   '\ue149',
        'ny.':  '\ue150',
        'iii.': '\ue15e',
        'ii.':  '\ue15d',
        'i.':  '\ue127',
        'I.':   '\ue15f',
        'aa.': '\ue129',
        'a.':  '\ue128',
        'ee.': '\ue12c',
        'e.':  '\ue12d',
        'uu.': '\ue12b',
        'u.':  '\ue12a',
        'rr.': '\ue12f',
        'r.':  '\ue12e',
        'cc.': '\ue131',
        'c.':  '\ue130',
        'o.':  '\ue132'
    }

adlamNasalizationMark = u'\U0001E94B'
adlamInitialExclamationMark = u'\U0001E95E'
adlamInitialQuestionMark = u'\U0001E95F'
reverseQuestionMark = u'\ue2e2'
# adlam_latin_map = {
#     ' ': u' ',
#     'A': u'𞤀',
#     'a': u'𞤢',
#     'AA': u'𞤀𞥄',
#     'Aa': u'𞤀𞥄',
#     'aa': u'𞤢𞥄',
#     'B': u'𞤄',
#     'b': u'𞤦',
#     'BB': u'𞤄𞥆',
#     'Bb': u'𞤄𞥆',
#     'bb': u'𞤦𞥆',
#     'Ɓ': u'𞤇',
#     'ɓ': u'𞤩',
#     'ƁƁ': u'𞤇𞥆',
#     'Ɓɓ': u'𞤇𞥆',
#     'ɓƁ': u'𞤩𞥆',
#     'ɓɓ': u'𞤩𞥆',
#     'BH': u'𞤇',
#     'Bh': u'𞤇',
#     'BBH': u'𞤇𞥆',
#     'Bbh': u'𞤇𞥆',
#     'bh': u'𞤩',
#     'bbh': u'𞤩𞥆',
#     'C': u'𞤕',
#     'c': u'𞤷',
#     'CC': u'𞤕𞥆',
#     'Cc': u'𞤕𞥆',
#     'cc': u'𞤷𞥆',
#     'D': u'𞤁',
#     'd': u'𞤣',
#     'DD': u'𞤁𞥆',
#     'Dd': u'𞤁𞥆',
#     'dd': u'𞤣𞥆',
#     'Ɗ': u'𞤍',
#     'ɗ': u'𞤯',
#     'ƊƊ': u'𞤍𞥆',
#     'Ɗɗ': u'𞤍𞥆',
#     'ɗɗ': u'𞤯𞥆',
#     'DH': u'𞤍',
#     'Dh': u'𞤍',
#     'dH': u'𞤯',
#     'dh': u'𞤯',
#     'DDH': u'𞤍𞥆',
#     'Ddh': u'𞤍𞥆',
#     'ddh': u'𞤯𞥆',
#     'E': u'𞤉',
#     'e': u'𞤫',
#     'EE': u'𞤉𞥅',
#     'Ee': u'𞤉𞥅',
#     'ee': u'𞤫𞥅',
#     'F': u'𞤊',
#     'f': u'𞤬',
#     'FF': u'𞤊𞥆',
#     'Ff': u'𞤊𞥆',
#     'ff': u'𞤬𞥆',
#     'G': u'𞤘',
#     'g': u'𞤺',
#     'GG': u'𞤘𞥆',
#     'Gg': u'𞤘𞥆',
#     'gg': u'𞤺𞥆',
#     'GB': u'𞤞',
#     'gb': u'𞥀',
#     'GGB': u'𞤞𞥆',
#     'Ggb': u'𞤞𞥆',
#     'ggb': u'𞥀𞥆',
#     'H': u'𞤖',
#     'h': u'𞤸',
#     'HH': u'𞤖𞥆',
#     'Hh': u'𞤖𞥆',
#     'hh': u'𞤸𞥆',
#     'I': u'𞤋',
#     'i': u'𞤭',
#     'II': u'𞤋𞥅',
#     'Ii': u'𞤋𞥅',
#     'ii': u'𞤭𞥅',
#     'J': u'𞤔',
#     'j': u'𞤶',
#     'JJ': u'𞤔𞥆',
#     'Jj': u'𞤔𞥆',
#     'jj': u'𞤶𞥆',
#     'K': u'𞤑',
#     'k': u'𞤳',
#     'KK': u'𞤑𞥆',
#     'Kk': u'𞤑𞥆',
#     'kk': u'𞤳𞥆',
#     'KH': u'𞤝',
#     'kh': u'𞤿',
#     'KKH': u'𞤝𞥆',
#     'Kkh': u'𞤝𞥆',
#     'kkh': u'𞤿𞥆',
#     'X': u'𞤝',
#     'x': u'𞤿',
#     'XX': u'𞤝𞥆',
#     'Xx': u'𞤝𞥆',
#     'xx': u'𞤿𞥆',
#     'L': u'𞤂',
#     'l': u'𞤤',
#     'LL': u'𞤂𞥆',
#     'Ll': u'𞤂𞥆',
#     'll': u'𞤤𞥆',
#     'M': u'𞤃',
#     'm': u'𞤥',
#     'MM': u'𞤃𞥆',
#     'Mm': u'𞤃𞥆',
#     'mm': u'𞤥𞥆',
#     'N': u'𞤐',
#     'n': u'𞤲',
#     'NN': u'𞤐𞥆',
#     'Nn': u'𞤐𞥆',
#     'nn': u'𞤲𞥆',
#     'Ŋ': u'𞤛',
#     'ŋ': u'𞤽',
#     'ŊŊ': u'𞤛𞥆',
#     'Ŋŋ': u'𞤛𞥆',
#     'ŋŋ': u'𞤽𞥆',
#     'NH': u'𞤛',
#     'Nh': u'𞤛',
#     'nH': u'𞤽',
#     'nh': u'𞤽',
#     'NNH': u'𞤛𞥆',
#     'Nnh': u'𞤛𞥆',
#     'nnh': u'𞤽𞥆',
#     'Ñ': u'𞤙',
#     'ñ': u'𞤻',
#     'ÑÑ': u'𞤙𞥆',
#     'Ññ': u'𞤙𞥆',
#     'ññ': u'𞤻𞥆',
#     'NY': u'𞤙',
#     'ny': u'𞤻',
#     'NNY': u'𞤙𞥆',
#     'Nny': u'𞤙𞥆',
#     'nny': u'𞤻𞥆',
#     'O': u'𞤌',
#     'o': u'𞤮',
#     'OO': u'𞤌𞥅',
#     'Oo': u'𞤌𞥅',
#     'oo': u'𞤮𞥅',
#     'P': u'𞤆',
#     'p': u'𞤨',
#     'PP': u'𞤆𞥆',
#     'Pp': u'𞤆𞥆',
#     'pp': u'𞤨𞥆',
#     'KP': u'𞤠',
#     'kp': u'𞥂',
#     'KKP': u'𞤠𞥆',
#     'Kkp': u'𞤠𞥆',
#     'kkp': u'𞥂𞥆',
#     'Q': u'𞤗',
#     'q': u'𞤹',
#     'QQ': u'𞤗𞥆',
#     'Qq': u'𞤗𞥆',
#     'qq': u'𞤹𞥆',
#     'GH': u'𞤗',
#     'gh': u'𞤹',
#     'GGH': u'𞤗𞥆',
#     'Ggh': u'𞤗𞥆',
#     'ggh': u'𞤹𞥆',
#     'R': u'𞤈',
#     'r': u'𞤪',
#     'RR': u'𞤈𞥆',
#     'Rr': u'𞤈𞥆',
#     'rr': u'𞤪𞥆',
#     'S': u'𞤅',
#     's': u'𞤧',
#     'SS': u'𞤅𞥆',
#     'Ss': u'𞤅𞥆',
#     'ss': u'𞤧𞥆',
#     'SH': u'𞤡',
#     'Sh': u'𞤡',
#     'sh': u'𞥃',
#     'sH': u'𞥃',
#     'SSH': u'𞤡𞥆',
#     'Ssh': u'𞤡𞥆',
#     'ssh': u'𞥃𞥆',
#     'T': u'𞤚',
#     't': u'𞤼',
#     'TT': u'𞤚𞥆',
#     'Tt': u'𞤚𞥆',
#     'tt': u'𞤼𞥆',
#     'U': u'𞤓',
#     'u': u'𞤵',
#     'UU': u'𞤓𞥅',
#     'Uu': u'𞤓𞥅',
#     'uu': u'𞤵𞥅',
#     'V': u'𞤜',
#     'v': u'𞤾',
#     'VV': u'𞤜𞥆',
#     'Vv': u'𞤜𞥆',
#     'vv': u'𞤾𞥆',
#     'W': u'𞤏',
#     'w': u'𞤱',
#     'WW': u'𞤏𞥆',
#     'Ww': u'𞤏𞥆',
#     'ww': u'𞤱𞥆',
#     'Y': u'𞤒',
#     'y': u'𞤴',
#     'YY': u'𞤒𞥆',
#     'Yy': u'𞤒𞥆',
#     'yy': u'𞤴𞥆',
#     'Ƴ': u'𞤎',
#     'ƴ': u'𞤰',
#     'ƳƳ': u'𞤎𞥆',
#     'Ƴƴ': u'𞤎𞥆',
#     'ƴƴ': u'𞤰𞥆',
#     'YH': u'𞤎',
#     'yh': u'𞤰',
#     'YYH': u'𞤎𞥆',
#     'Yyh': u'𞤎𞥆',
#     'yyh': u'𞤰𞥆',
#     'Z': u'𞤟',
#     'z': u'𞥁',
#     'ZZ': u'𞤟𞥆',
#     'Zz': u'𞤟𞥆',
#     'zz': u'𞥁𞥆',
#     'ND': "𞤐'𞤁",
#     'Nd': "𞤐'𞤁",
#     'nd': "𞤲'𞤣",
#     'MB': "𞤐'𞤄",
#     'Mb': "𞤐'𞤄",
#     'mb': "𞤲'𞤦",
#     'NJ': "𞤐'𞤔",
#     'Nj': "𞤐'𞤔",
#     'nj': "𞤲'𞤶",
#     'NG': "𞤐'𞤘",
#     'Ng': "𞤐'𞤘",
#     'ng': "𞤲'𞤺",
#     'nnd': u'𞤲𞤣',
#     'mmb': u'𞤥𞤦',
#     'nnj': u'𞤲𞤶',
#     'nng': u'𞤲𞤺',
#     '0': u'𞥐',
#     '1': u'𞥑',
#     '2': u'𞥒',
#     '3': u'𞥓',
#     '4': u'𞥔',
#     '5': u'𞥕',
#     '6': u'𞥖',
#     '7': u'𞥗',
#     '8': u'𞥘',
#     '9': u'𞥙',
#     '.': u'.',
#     ',': u'⹁',
#     '\u061f': reverseQuestionMark,
#     # ';': u'⁏'
#     #'?':  u'?',
#     #u'\u201c': u'\u201c',
#     #u'\u201d': u'\u201d',
#             ':': ':',
#     '!': '!',
#     "\u0027": adlamNasalizationMark,
# }

# rev = in_parsed.sort(key=sortRevN, reverse=True)

#print(in_parsed)

#out = '|'.join(in_parsed)
#print(out)

def sortRevN(a):
    return len(a)

def processRules(rules):
    keys = list(rules.keys())
    keys.sort(key=sortRevN, reverse=True)

    print('|'.join(keys).replace('.',''))

def main(argv):
    # TODO: get the file and open it
    if len(argv) > 1:
        kb_data = keyboard_data(argv[1])
        kb_data.fields()
    else:
        print('No filename given')

    #processRules(adlam_latin_map)
    processRules(adlam_to_latin_map)
    
    # TODO: Process rules from the keyboard
    # processRules(input_rules)
    return

if __name__ == '__main__':
    main(sys.argv)
